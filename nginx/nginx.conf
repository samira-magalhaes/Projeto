# /mnt/c/Users/samir/OneDrive - ISCTE-IUL/Ambiente de Trabalho/2º ano/2º Semestre/Programação para a Internet/nginx/nginx.conf

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    sendfile on; # Otimização para envio de arquivos

    # Upstream para o seu Backend (onde está o Socket.IO e a API)
    # A comunicação interna com o backend é HTTP
    upstream backend-app-socketio {
        ip_hash; # Essencial para sticky sessions do Socket.IO
        server sc-python_app:8000; # Nome do serviço Docker Compose e porta INTERNA
    }

    # Upstream para o seu Frontend (onde estão os arquivos HTML, JS, CSS)
    # A comunicação interna com o frontend é HTTP
    upstream frontend-app-web {
        server sc-flask_frontend:8000; # Nome do serviço Docker Compose e porta INTERNA
    }

    # Bloco para redirecionar HTTP (porta 80) para HTTPS (porta 443)
    server {
        listen 80;
        server_name localhost; # Ou o domínio do seu projeto (ex: safechat.com)

        location / {
            return 301 https://$host$request_uri; # Redireciona tudo para HTTPS
        }
    }

    # Bloco principal para as conexões HTTPS
    server {
        listen 443 ssl;
        server_name localhost; # Ou o domínio do seu projeto

        # Certificados SSL para a terminação SSL no Nginx
        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /tmp/server_key_unencrypted.pem; 
        #aqui estou indicando para nginx usar a chave desencripatda 
        #que está no diretório temporário (/temp) dentro do contêiner



        # Opcional: Configuração para mTLS do cliente com Nginx
        # Se você precisar que o Nginx valide certificados de cliente,
        # descomente as linhas abaixo e garanta que 'all_client_ca.pem' ou o CA correto
        # esteja montado em /etc/nginx/certs/all_client_ca.pem
        # ssl_client_certificate /etc/nginx/certs/all_client_ca.pem; # CA que assinou os certificados dos clientes
        # ssl_verify_client on; # Exige certificado do cliente
        # ssl_verify_depth 2;

        # Configurações SSL adicionais (recomendado para segurança)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:ECDHE+AES256:DHE+AES256:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA';
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;


        # 1. Trata requisições para o Socket.IO (proxy para o Backend)
        location /socket.io/ {
            # Corrigido: proxy_pass para HTTP, pois o backend não está a lidar com SSL
            proxy_pass http://backend-app-socketio/socket.io/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade"; # Crucial para WebSockets
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme; # Indica que a requisição original era HTTPS
            proxy_read_timeout 86400; # Tempo limite para conexões WebSocket
            proxy_redirect off; # Evita redirecionamentos automáticos do Nginx
            # Removidos proxy_ssl_server_name e proxy_ssl_verify, pois a comunicação interna é HTTP
        }

        # 2. Trata requisições para a API e Uploads (proxy para o Backend)
        # O padrão '/api/' é mais flexível e captura /api/uploads/ e outras rotas de API.
        location /api/ {
            # Corrigido: proxy_pass para HTTP, pois o backend não está a lidar com SSL
            proxy_pass http://backend-app-socketio; # Encaminha para o backend; o backend deve ter a rota /api/uploads/
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            # Removidos proxy_ssl_server_name e proxy_ssl_verify
        }
        
        # 3. Trata todas as outras requisições (proxy para o Frontend)
        # Isso incluirá /, /login, /static/css/, /static/js/ etc.
        location / {
            # Corrigido: proxy_pass para HTTP, pois o frontend não está a lidar com SSL
            proxy_pass http://frontend-app-web;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            # Removidos proxy_ssl_server_name e proxy_ssl_verify
        }
    }
}