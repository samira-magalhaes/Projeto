
# Configurações globais para o Nginx.
# Um valor alto é bom para aplicações de chat como Socket.IO.
events {
    # Define o número máximo de conexões simultâneas que cada worker pode manipular.
    worker_connections 1024;
    # Multi-accept permite que o worker aceite múltiplas novas conexões de uma vez,
    # em vez de uma por uma. Útil em cenários de alto tráfego.
    multi_accept on;
}

# Bloco principal para configurações HTTP.
http {
    # Inclui os tipos MIME padrão para que o Nginx sirva arquivos estáticos corretamente.
    include /etc/nginx/mime.types;
    # Define o tipo MIME padrão para arquivos desconhecidos.
    default_type application/octet-stream;
    # Habilita o envio otimizado de arquivos, melhorando a performance.
    sendfile on;
    # Desabilita o Nagle's algorithm, o que pode reduzir a latência
    # para aplicações de tempo real como o chat, enviando pacotes menores mais rapidamente.
    tcp_nodelay on;
    # Habilita a otimização de TCP para enviar cabeçalhos e o início do corpo
    # em um único pacote, melhorando o tempo de resposta inicial.
    tcp_nopush on;

    # Essencial para o Socket.IO: Define a variável $connection_upgrade.
    # Se o cabeçalho 'Upgrade' da requisição HTTP for 'websocket',
    # a variável $connection_upgrade será 'upgrade'. Caso contrário, será vazia.
    # Isso é usado para o cabeçalho 'Connection' nas requisições proxy_pass,
    # permitindo o upgrade para o protocolo WebSocket.
    map $http_upgrade $connection_upgrade {
        websocket upgrade;
        default '';
    }

    

    ## Upstreams: Definições dos Servidores Backend

    # Upstream para o serviço de backend (Python/Flask-SocketIO)
    # 'sc-python_app' deve corresponder ao nome do serviço no seu docker-compose.yaml
    upstream backend-app-socketio {
        server sc-python_app:8000;
        # ip_hash; # Mantenha esta linha COMENTADA se estiver usando Redis como message queue
                  # para permitir que qualquer worker do backend responda, garantindo escalabilidade.
                  # Se você NÃO usa Redis e tem múltiplos workers, pode ser necessário (mas não recomendado).
    }

    # Upstream para o serviço de frontend (Flask-Frontend)
    # 'sc-flask_frontend' deve corresponder ao nome do serviço no seu docker-compose.yaml
    upstream frontend-app-web {
        server sc-flask_frontend:8000;
    }

  
    ## Servidor HTTP (Redireciona para HTTPS)

    # Este bloco de servidor escuta na porta 80 (HTTP) e redireciona todo o tráfego
    # para a versão HTTPS (porta 443).
    server {
        listen 80;
        server_name localhost; # Em produção, substitua 'localhost' pelo seu domínio (ex: chat.seusite.com).

        location / {
            # Retorna um redirecionamento permanente (301) para a versão HTTPS.
            return 301 https://$host$request_uri;
        }
    }

 

    ## Servidor HTTPS Principal

    # Este é o bloco principal do servidor, escutando na porta 443 (HTTPS).
    # Ele lida com a terminação SSL/TLS.
    server {
        listen 443 ssl;
        server_name localhost; # Em produção, substitua 'localhost' pelo seu domínio.

        # Caminhos para os certificados SSL/TLS.
        # Estes caminhos devem ser mapeados via volumes no seu docker-compose.yaml
        # e os arquivos devem estar acessíveis dentro do contêiner Nginx.
        ssl_certificate /etc/nginx/certs/server.crt;
        # A chave privada deve ser descriptografada e salva em /tmp/server_key_unencrypted.pem
        # pelo seu Dockerfile do Nginx ou script de entrada, por segurança.
        ssl_certificate_key /tmp/server_key_unencrypted.pem;

        # Configurações de segurança SSL/TLS para conexões seguras.
        ssl_protocols TLSv1.2 TLSv1.3; # Permite apenas versões seguras do TLS.
        ssl_prefer_server_ciphers on; # Prioriza os ciphers do servidor.
        ssl_ciphers 'ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:ECDHE+AES256:DHE+AES256:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA';
        ssl_session_cache shared:SSL:10m; # Cache para sessões SSL, melhora performance.
        ssl_session_timeout 10m; # Tempo limite para sessões SSL.

        # Log de erros detalhado (APENAS PARA DEPURAR! REMOVER EM PRODUÇÃO)
        # error_log /var/log/nginx/error.log debug;

       

        ## Localização para o Socket.IO (Frontend para Backend)

        # Todas as requisições para '/socket.io/' (usadas pelo cliente Socket.IO)
        # serão roteadas para o serviço de backend Flask-SocketIO.
        location /socket.io/ {
            # CORREÇÃO CRÍTICA AQUI: Passa o caminho completo do Socket.IO para o backend.
            # É crucial que o Flask-SocketIO receba '/socket.io/' como parte do caminho.
            proxy_pass http://backend-app-socketio/socket.io/; 
            
            proxy_http_version 1.1; # Essencial para WebSocket.
            # Cabeçalhos essenciais para o upgrade de HTTP para WebSocket.
            proxy_set_header Upgrade $http_upgrade;
            # Usa a variável 'map' definida acima para o cabeçalho 'Connection'.
            proxy_set_header Connection $connection_upgrade; 
            
            # Repassa cabeçalhos importantes para o backend.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Indica ao backend que a requisição original era HTTPS.
            proxy_set_header X-Forwarded-Proto $scheme; 

            # Aumenta o timeout para conexões longas de WebSocket (24 horas).
            proxy_read_timeout 86400s; 
            proxy_send_timeout 86400s; # Adicionado para consistência
            # Desabilita o buffering para garantir streaming de dados em tempo real.
            proxy_buffering off; 
            # Desabilita o cache para o Socket.IO, pois os dados são dinâmicos.
            proxy_cache off; 

            # Evita que o Nginx reescreva URLs de redirecionamento do backend.
            proxy_redirect off; 
            # Pode ser útil para o backend saber o caminho original se houver reescrita.
            proxy_set_header X-Nginx-Proxy-Path $request_uri;
        }

        

        ## Localização para a API do Backend (se houver)

        # Se você tiver outras rotas de API no seu backend que não são Socket.IO,
        # pode roteá-las separadamente.
        location /api/ {
            proxy_pass http://backend-app-socketio/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }
        
        

        ## Localização Padrão (Frontend)

        # Todas as outras requisições (que não '/socket.io/' ou '/api/')
        # serão roteadas para o serviço de frontend Flask.
        location / {
            proxy_pass http://frontend-app-web; # Aponta para o upstream do frontend.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }
    }
}