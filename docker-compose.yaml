version: '3.8'

services:
  # Serviço do Servidor Web Nginx
  web:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: safe-chat_nginx_server
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./safechat-backend/app/ssl/server:/etc/nginx/certs:ro
    environment:
      # Certifique-se de que esta variável é usada dentro do seu nginx.conf se o Nginx precisar dela,
      # ou remova se a senha for lida via ssl_password_file.
      # Para mTLS com Gunicorn, o Gunicorn lida com a chave do servidor e senha.
      SERVER_KEY_PASSPHRASE: ${SERVER_KEY_PASSWORD_NGINX}
    networks:
      - sc-network
    depends_on:
      backend-app:
        condition: service_healthy
      frontend-app:
        condition: service_healthy
    healthcheck: # Adicionando healthcheck para o Nginx
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Serviço do Banco de Dados Redis (Message Queue para Socket.IO)
  redis:
    image: redis:latest
    container_name: sc-redis
    ports:
      - "6379:6379"
    networks:
      - sc-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço da Aplicação Frontend (Python Flask)
  frontend-app:
    build: ./safechat-front/app
    container_name: sc-flask_frontend
    environment:
      DB_HOST: db
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_NAME: ${MYSQL_DATABASE}
      FLASK_SECRET_KEY_FRONTEND: ${FLASK_SECRET_KEY_FRONTEND}
      # Removidas as variáveis de chaves públicas/privadas, pois o frontend geralmente não as utiliza diretamente.
      # Se o seu frontend as usa, adicione de volta e ajuste os caminhos.
    networks:
      - sc-network
    volumes:
      - ./safechat-front/app:/app
      # Mantenha apenas o volume de uploads se o frontend também precisar escrever lá,
      # caso contrário, ele só precisa acessar o do backend via URL.
      # Se o frontend só lê uploads do backend, este volume não é estritamente necessário.
      # - ./safechat-front/app/static/images/uploads:/app/static/images/uploads
      # O volume abaixo foi removido por ser inconsistente com a definição do Flask.
      # - ./safechat-front/app/uploads:/app/uploads
      - ./safechat-backend/app/ssl:/app/ssl_keys_from_backend:ro # Acesso de leitura às chaves do backend para o frontend (se necessário)
    depends_on:
      db:
        condition: service_healthy
      backend-app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"] # Use a rota real se tiver uma de healthcheck
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    # Adicione o comando para iniciar o Gunicorn ou Flask em modo de produção
    command: gunicorn -w 4 -b 0.0.0.0:8000 app:app # Exemplo, ajuste para o seu arquivo de entrada do Flask

  # Serviço da Aplicação Backend (Python Flask-SocketIO com Criptografia)
  backend-app:
    build: ./safechat-backend/app
    container_name: sc-python_app
    # Use env_file para carregar variáveis do .env principal do projeto,
    # e/ou de um .env específico do backend se necessário.
    # Evite duplicar variáveis que já estão no .env principal.
    env_file:
      - ./.env # Carrega o .env da raiz do projeto para variáveis como MYSQL_USER, etc.
      - ./safechat-backend/app/.env # Carrega variáveis específicas do backend se houver (ex: FLASK_SECRET_KEY_BACKEND)
    environment:
      # Remova as variáveis duplicadas se já estiverem nos arquivos .env
      # DB_HOST: db
      # DB_USER: ${MYSQL_USER}
      # DB_PASSWORD: ${MYSQL_PASSWORD}
      # DB_NAME: ${MYSQL_DATABASE}
      # FLASK_SECRET_KEY_BACKEND: ${FLASK_SECRET_KEY_BACKEND}
      REDIS_URL: redis://redis:6379 # Passa a URL do Redis para o backend
    networks:
      - sc-network
    volumes:
      - ./safechat-backend/app:/app
      - ./safechat-backend/app/ssl:/app/ssl:ro
      - ./safechat-backend/app/static/images/uploads:/app/static/images/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy # Use 'service_healthy' para o Redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: gunicorn -w 4 -k eventlet -b 0.0.0.0:8000 wsgi:app

  # Serviço do Banco de Dados MySQL
  db:
    image: mysql:latest
    container_name: sc-mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      - ./safechat-backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3308:3306"
    networks:
      - sc-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s

networks:
  sc-network:
    driver: bridge

volumes:
  db_data: